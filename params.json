{
  "name": "LEGO Mindstorm EV3 ",
  "tagline": "RUBIK'S CUBE SOLVER USING LEGO MINDSTORM",
  "body": "### LEGO Mindstorm EV3\r\nLEGO Mindstorm EV3 merupakan _kit_ robotik generasi ketiga dari seri LEGO Mindstorm. EV3 adalah suksesor seri sebelumnya yaitu LEGO Mindstorm NXT 2.0. EV sendiri merupakan akronim dari \"Evolution\" dan angka 3 menunjukkan eksistensinya sebagai generasi ke-tiga (sebelumnya RCX dan NXT). EV3 mulai diperkenalkan ke publik pada tanggal 4 Januari 2013 dan mulai dipasarkan pada tanggal 1 September 2013. Dewasa ini, EV3 dikembangkan menjadi robot-robot menarik yang dapat membantu pekerjaan manusia. Salah satu pengembangan yang menarik adalah _Rubik's Cube Solver_ dengan menggunakan LEGO Mindstorm EV3, yang akan kita bahas. [go to official site](http://www.lego.com/en-gb/mindstorms)\r\n\r\n### LEGO Mindstorm Mindcub3r\r\nSesuai nama dan apa yang penulis bahas sebelumnya, LEGO Mindcub3r selanjutnya akan disebut Mindcuber adalah robot yang dapat menyelesaikan _rubiks cube_. Saat ini, MindCuber tersedia untuk LEGO Mindstorm EV3 dan NXT. Rata - rata waktu pengerjaan rubiks cube dengan robot ini relatif lambat yaitu diatas 1 menit. \r\n\r\n### Algoritma yang Digunakan\r\nTentunya robot tidak bisa melakukan apapun apabila tidak ada algoritma yang mengatur pergerakkan mereka. Algoritma Mindcuber cukup mudah dimengerti baik algoritma pergerakkan robot maupun algoritma untuk menyelesaikan _rubiks cube_.\r\n\r\n1. Algoritma pergerakan robot\r\nMindcuber menggunakan 2 buah motor, 1 buah digunakan untuk menahan posisi kubus dan yang satunya lagi digunakan untuk memutar kubus. Pada saat awal program dijalankan, sensor warna akan men-scan warna stiker pada setiap _piece_ pada kubus. _Center Piece_ tidak perlu di scan karena posisi _center_ tidak akan berubah relatif satu sama lain. Untuk desain dan detil lebih lengkap : <http://mindcuber.com/mindcub3r/mindcub3r.html>\r\n\r\n2. Algoritma solving Rubiks Cube\r\nMindcuber menggunakan algoritma _block building_ dalam menyelesaikan rubiks cube. Apa itu _block building_ ? adalah sebuah algoritma menyelesaikan rubik dengan membangun blok terkecil lalu di perbesar hingga rubik _solved_. Misal untuk rubik ukuran 3x3x3, maka akan dibuat dulu blok 2x1x1 lalu dilanjutkan hingga menjadi 2x2x2 -> 3x2x2 dan akhirnya finishing menjadi 3x3x3 yang _solved_. Hal ini yang membuat Mindcuber tidak dapat beroperasi dengan cepat.\r\n\r\n### Author's Future Implementation\r\nJika Penulis masuk lab GaIB, penulis akan melakukan improvement pada algoritma penyelesaian rubiks cube, yaitu dengan menggunakan _**fridrich method**_ agar eksekusi menjadi lebih cepat. Selama ini algoritma yang diimplementasikan pada Mindcuber adalah _block building_ karena mudah dan hanya 1 kali pembacaan _color sensor_, jika mengimplementasikan _fridrich_ maka banyak kasus tambahan yang harus ditangani. Hal ini yang membuat algoritma fridrich tidak dipakai pada robot. Tetapi dengan kerja keras penulis yakin bahwa algoritma ini dapat diimplementasikan dengan efektif pada Mindcuber kelak bila berhasil masuk lab GaIB.\r\n\r\n### Fridrich Algorithm\r\nSekilas penulis akan memberi sedikit penjelasan mengenai algoritma Fridrich, sesuai nama penemunya Jessica Fridrich. Algoritma fridrich sering disebut sebagai CFOP yang merupakan singkatan tahap-tahap penyelesaiannya : _Cross_, _First 2 layers, Orientation of Last Layer (OLL) , Permutation of Last Layer (PLL)_.\r\n\r\n1. _Cross_ adalah suatu tahap pertama seperti pada metode pemula, membuat sebuah tanda + pada suatu sisi rubik\r\n\r\n2. _First 2 Layer_ (F2L) adalah algoritma yang langsung menyelesaikan baris pertama dan kedua pada rubik 3x3x3\r\n\r\n3. _Orientation of Last Layer_ (OLL) adalah tahap dimana semua sisi bagian atas kubus diselesaikan hanya dengan 1 algoritma\r\n\r\n4. _Permutation of Last Layer_ (PLL) adalah tahap terakhir, baris ketiga pada kubus akan selesai hanya dengan 1 algoritma\r\n\r\nMeskipun terdengar sangat mudah, tetapi total ada 140 lebih algoritma yang harus kita implementasikan pada robot. Hal ini karena algoritma fridrich menyelesaikan segala sesuatu hanya dengan 1 algoritma pada setiap tahapannya, sehingga untuk pola tertentu diperlukan suatu algoritma spesifik yang dapat menyelesaikannya.\r\n\r\n### Support or Contact\r\n* Author  : Varian Caesar / 13514041\r\n* Contact : variancaesar@gmail.com\r\n* Page    : <https://github.com/varian97>",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}